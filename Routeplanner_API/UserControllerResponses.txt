public class StatusCodeResponseDto<T>
    {
        public StatusCodeResponse StatusCodeResponse;

        public string? Message;

        public T? Data; 
    }


[HttpGet]
[Authorize]
// Should be only accessible by admins or special authorized people
[ProducesResponseType(StatusCodes.Status200OK)]
[ProducesResponseType(StatusCodes.Status500InternalServerError)]
public async Task<ActionResult<StatusCodeResponseDto<IEnumerable<UserDto>>>> GetUsers()
	return _userUoW.CreateStatusResponseDto<IEnumerable<UserDto>>(StatusCodeResponse.Success, null, users);
	return _userUoW.CreateStatusResponseDto<IEnumerable<UserDto>>(StatusCodeResponse.InternalServerError, "An unexpected error occurred while retrieving users.", null);


[HttpGet("{userId}")]
[Authorize]
[ProducesResponseType(StatusCodes.Status200OK)]
[ProducesResponseType(StatusCodes.Status404NotFound)]
[ProducesResponseType(StatusCodes.Status500InternalServerError)]
public async Task<ActionResult<StatusCodeResponseDto<UserDto?>>> GetUserById(Guid userId)
	return CreateStatusResponseDto<UserDto?>(StatusCodeResponse.NotFound, $"User with ID {userId} not found.", null);
	return CreateStatusResponseDto<UserDto?>(StatusCodeResponse.Success, $"User with ID {userId} found.", _mapper.Map<UserDto>(user));
	return _userUoW.CreateStatusResponseDto<UserDto?>(StatusCodeResponse.InternalServerError, $"An unexpected error occurred while retrieving user {userId}.", null);


[HttpPost]
[ProducesResponseType(StatusCodes.Status201Created)]
[ProducesResponseType(StatusCodes.Status400BadRequest)]
[ProducesResponseType(StatusCodes.Status500InternalServerError)]
public async Task<ActionResult<StatusCodeResponseDto<string?>>> CreateUser([FromBody] CreateUserDto createUserDto)
	return _userUoW.CreateStatusResponseDto<string?>(StatusCodeResponse.BadRequest, "CreateUser called with invalid model state.", null);
	return CreateStatusResponseDto<string?>(StatusCodeResponse.InternalServerError, "Error creating user: no userRightId in the database.", null);
	return CreateStatusResponseDto<string?>(StatusCodeResponse.Created, $"User created successfully with ID: {createdUser.Id}", GenerateUserJwtToken(_mapper.Map<UserDto>(createdUser)));
	return CreateStatusResponseDto<string?>(StatusCodeResponse.BadRequest, validateUsernameAndEmail, null);
	return _userUoW.CreateStatusResponseDto<string?>(StatusCodeResponse.InternalServerError, "An unexpected error occurred while creating the user.", null);


[HttpPost("Login")]
[ProducesResponseType(StatusCodes.Status200OK)]
[ProducesResponseType(StatusCodes.Status400BadRequest)]
[ProducesResponseType(StatusCodes.Status401Unauthorized)]
[ProducesResponseType(StatusCodes.Status500InternalServerError)]
public async Task<ActionResult<StatusCodeResponseDto<string?>>> LoginUser([FromBody] UserDto userDto)
	return _userUoW.CreateStatusResponseDto<string?>(StatusCodeResponse.BadRequest, "LoginUser called with invalid model state.", null);
	return CreateStatusResponseDto<string?>(StatusCodeResponse.BadRequest, "Invalid username", null);
	return CreateStatusResponseDto<string?>(StatusCodeResponse.Success, "Login successful", GenerateUserJwtToken(receivedUserDto));
	return CreateStatusResponseDto<string?>(StatusCodeResponse.BadRequest, "Invalid password", null);
	return _userUoW.CreateStatusResponseDto<string?>(StatusCodeResponse.InternalServerError, "An unexpected error occurred while logging in the user.", null);


[HttpPut("{userId}")]
[Authorize]
// Should be only accessible by admins or special authorized people
// as example using: [Authorize (Roles = "Admin")]
[ProducesResponseType(StatusCodes.Status200OK)]
[ProducesResponseType(StatusCodes.Status400BadRequest)]
[ProducesResponseType(StatusCodes.Status404NotFound)]
[ProducesResponseType(StatusCodes.Status500InternalServerError)]
public async Task<ActionResult<StatusCodeResponseDto<UserDto?>>> UpdateUser(Guid userId, [FromBody] UpdateUserDto updateUserDto)
	return _userUoW.CreateStatusResponseDto<UserDto?>(StatusCodeResponse.BadRequest, "UpdateUser called with invalid model state.", null);
	return CreateStatusResponseDto<UserDto?>(StatusCodeResponse.NotFound, $"User with ID: {userId} not found for update", null); 
	return CreateStatusResponseDto<UserDto?>(StatusCodeResponse.Success, "User with ID: {userId} updated successfully", _mapper.Map<UserDto>(updatedUser));
	return CreateStatusResponseDto<UserDto?>(StatusCodeResponse.BadRequest, validateUsernameAndEmail, null);
	return _userUoW.CreateStatusResponseDto<UserDto?>(StatusCodeResponse.InternalServerError, $"An unexpected error occurred while updating user {userId}.", null);


[HttpDelete("{userId}")]
[Authorize]
// Should be only accessible by admins or special authorized people
// as example using: [Authorize (Roles = "Admin")]
[ProducesResponseType(StatusCodes.Status200OK)]
[ProducesResponseType(StatusCodes.Status404NotFound)]
[ProducesResponseType(StatusCodes.Status500InternalServerError)]
public async Task<ActionResult<StatusCodeResponseDto<bool>>> DeleteUser(Guid userId)
	return CreateStatusResponseDto<bool>(StatusCodeResponse.Success, $"User with ID: {userId} deleted successfully", true);
	return CreateStatusResponseDto<bool>(StatusCodeResponse.NotFound, $"User with ID: {userId} not found for deletion", false);
	return _userUoW.CreateStatusResponseDto<bool>(StatusCodeResponse.InternalServerError, $"An unexpected error occurred while deleting user {userId}.", false);